generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id           Int      @id @default(autoincrement())
  input        String
  output       String
  explanation  String?
  problem      Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("examples")
}

model Problem {
  id                      Int          @id @default(autoincrement())
  difficulty              String
  name                    String
  source                  String
  raw_tags                String[]
  tags                    String[]
  skill_types             String[]
  url                     String?
  expected_auxiliary_space String?
  expected_time_complexity String?
  time_limit              String?
  date                    String?
  picture_num             String?
  memory_limit            String?
  description             String?
  input_desc              String?      @map("input")
  output_desc             String?      @map("output")
  note                    String?
  solutions               Solution[]
  examples                Example[]
  submissions             Submission[]
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")

  @@map("problems")
}

model Solution {
  id             Int      @id @default(autoincrement())
  code           String
  language       String
  solutionNumber Int      @map("solution_number")
  problem        Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId      Int      @map("problem_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("solutions")
}

model Submission {
  id            Int       @id @default(autoincrement())
  language      String
  version       String
  code          String
  note          String?
  status        String    @default("rejected")
  executionTime Float?    @map("execution_time")
  results       Json
  problem       Problem   @relation(fields: [problemId], references: [id])
  problemId     Int       @map("problem_id")
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("submissions")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  submissions  Submission[]
  role         String        @default("user")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("users")
}