my backend: 
const submissionController = require('../controllers/submissionController');
const { protect } = require('../middleware/authMiddleware');
router.post('/', protect, submissionController.createSubmission);
router.get('/', protect, submissionController.getSubmission);
router.get('/:id', protect, submissionController.getSubmissionById);
router.put('/:id', protect, submissionController.updateSubmission);
----

const problemController = require('../controllers/problemController');
const { protect } = require('../middleware/authMiddleware');
const { adminAccess } = require('../middleware/adminAccess');

router.get('/', problemController.getAllProblems);
router.get('/:id', problemController.getProblemById);
router.post('/', protect, adminAccess, problemController.addProblem);
----

router.post('/signup', userController.register)
router.post('/login', userController.login)
router.post('/logout', userController.logout)
router.get('/profile', protect, userController.profile)

----

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  password: {type: String, required: true },
  submissions: [
    {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Submission'
    }
  ],
  role: {
    type: String,
    enum: ['admin', 'user'],
    default: 'user'
  }
}, { timestamps: true });

const mongoose = require('mongoose');

const exampleSchema = new mongoose.Schema({
  input: String,
  output: String,
  explanation: String // optional
});

const problemSchema = new mongoose.Schema({
  difficulty: String,
  name: String,
  source: String,

  raw_tags: [String],
  tags: [String],
  skill_types: [String],

  url: String,
  expected_auxiliary_space: String,
  expected_time_complexity: String,
  time_limit: String,
  date: String,
  picture_num: String,
  memory_limit: String,

  description: String,
  input: String,
  output: String,
  note: String,

  solutions: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Solution'
  }],

  examples: [exampleSchema]

}, { timestamps: true, collection: 'Problem' });

module.exports = mongoose.model('Problem', problemSchema);

// models/Submission.js
const mongoose = require('mongoose');

const submissionSchema = new mongoose.Schema({
  // (1) what to get from user
  language: { type: String, required: true },
  version: { type: String, required: true },
  code: { type: String, required: true },
  note: { type: String },

  // (2) what is the response of PISTON-API
  status: { 
    type: String, 
    enum: ["accepted", "rejected"], 
    default: "rejected" 
  },
  executionTime: {type: Number},

  results: [
    {
      input: { type: String },
      output: { type: String },
      expected: { type: String },
      passed: { type: Boolean },
      executionTime: { type: Number },
      error: { type: String }
    }
  ],

  // (3) db references
  problem: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Problem'
    },

  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, { timestamps: true });

module.exports = mongoose.model('Submission', submissionSchema);

------ 
current frontend 
 tree -L 4
.
├── App.css
├── App.jsx
├── assets
│   └── react.svg
├── components
│   └── Navbar.jsx
├── index.css
├── main.jsx
└── Pages
    ├── Authentication
    ├── Home.jsx
    ├── NotFound.jsx
    └── ProblemPages
        ├── codeEditor
        │   ├── CodeEditor.jsx
        │   └── languages.js
        ├── data.json
        ├── ProblemDetails.jsx
        └── Problems.jsx

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router';
import CodeEditor from './codeEditor/CodeEditor';

const ProblemDetails = () => {
  const { id } = useParams();
  const [problem, setProblem] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axios.get(`http://localhost:5000/api/problems/${id}`)
      .then(res => {
        setProblem(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error('Problem fetch error:', err);
        setLoading(false);
      });
  }, [id]);

  if (loading) return <div className="p-4">Loading...</div>;
  if (!problem) return <div className="p-4">Problem not found.</div>;

  const { name, difficulty, url, tags, description, input_format, output_format, examples, solutions } = problem;

  return (
    <>
      <div className="">
        <h1 className="text-2xl font-bold">Problem — {name} ({difficulty})</h1>
        <div><strong>Tags:</strong> {tags?.join(', ')}</div>
        <div><strong>Link:</strong> <a href={url} className="text-blue-600 underline" target="_blank" rel="noreferrer">{url}</a></div>

        <div className="mt-4">
          <h2 className="text-xl font-semibold">Description</h2>
          <p>{description}</p>
        </div>

        <div>
          <h2 className="text-xl font-semibold">Input Format</h2>
          <pre>{input_format}</pre>
        </div>

        <div>
          <h2 className="text-xl font-semibold">Output Format</h2>
          <pre>{output_format}</pre>
        </div>

        {examples?.length > 0 && (
          <div>
            <h2 className="text-xl font-semibold">Examples</h2>
            {examples.map((ex, i) => (
              <div key={i} className="p-2 bg-gray-100 rounded mb-2">
                <div><strong>Input:</strong> {ex.input}</div>
                <div><strong>Output:</strong> {ex.output}</div>
                {ex.explanation && <div><strong>Explanation:</strong> {ex.explanation}</div>}
              </div>
            ))}
          </div>
        )}

        {solutions?.length > 0 && (
          <div>
            <h2 className="text-xl font-semibold">Solutions</h2>
            {solutions.map((s, i) => (
              <div key={i} className="p-3 border rounded mt-2">
                <div><strong>Language:</strong> {s.language}</div>
                <pre className="bg-gray-200 p-2 rounded mt-1">{s.code}</pre>
              </div>
            ))}
          </div>
        )}
      </div>

      <div className="lower">
        <div className="w-1/2">
          <CodeEditor testcases={examples}/>
        </div>
      </div>
    </>
  );
};

export default ProblemDetails;, give full frontend for my backend and also guide me